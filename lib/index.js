"use strict";
Object.defineProperties(exports, {
  PWM: {get: function() {
      return PWM;
    }},
  __esModule: {value: true}
});
var $__raspi_45_peripheral__,
    $___46__46__47_lib_47_addon__;
var Peripheral = ($__raspi_45_peripheral__ = require("raspi-peripheral"), $__raspi_45_peripheral__ && $__raspi_45_peripheral__.__esModule && $__raspi_45_peripheral__ || {default: $__raspi_45_peripheral__}).Peripheral;
var addon = ($___46__46__47_lib_47_addon__ = require("../lib/addon"), $___46__46__47_lib_47_addon__ && $___46__46__47_lib_47_addon__.__esModule && $___46__46__47_lib_47_addon__ || {default: $___46__46__47_lib_47_addon__}).default;
var PWM = function PWM(pin) {
  if (typeof pin == 'undefined') {
    pin = 'PWM0';
  }
  $traceurRuntime.superCall(this, $PWM.prototype, "constructor", [pin]);
  addon.init(this.pins[0]);
};
var $PWM = PWM;
($traceurRuntime.createClass)(PWM, {write: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    if (typeof value != 'number' || value < 0 || value > 1024) {
      throw new Error('Invalid PWM value ' + value);
    }
    addon.write(this.pins[0], value);
  }}, {}, Peripheral);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzgiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xMCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci85Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQTtBQ3hCQSxLQUFLLGlCQUFpQixBQUFDLENBQUMsT0FBTTtLQ0E5QixFQUFDLEdBQUUsWUNBcUI7QUFBRSxnQkFBd0I7SUFBRSxBREE5QixDQUFDO0FFQXZCLFdBQVMsQ0NBVCxFQUFDLEtBQUksQ0RBTyxLQUFHLEFDQVMsQ0FBQztDSkF5QixDQUFDOzs7RUR3QjFDLFdBQVMsRU14QmxCLEVBQUMsMEJBQW9CLENBQUEsT0FBTSxBQUFDLG9CQUFrQixDQUN0QyxDQUFBLDJCQUFxQixvQ0FBMkIsQ0FBQSwyQkFBcUIsR0FBSyxFQUFDLE9BQU0sMEJBQW1CLENBRDlELEFBQytELENBQUM7RU53QnZHLE1BQUksRU16QlgsRUFBQywrQkFBb0IsQ0FBQSxPQUFNLEFBQUMsZ0JBQWtCLENBQ3RDLENBQUEsZ0NBQXFCLHlDQUEyQixDQUFBLGdDQUFxQixHQUFLLEVBQUMsT0FBTSwrQkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztBQ0Q5RyxBQUFJLEVBQUEsTVAyQkcsU0FBTSxJQUFFLENBQ0QsR0FBRSxDQUFHO0FBQ2YsS0FBSSxNQUFPLElBQUUsQ0FBQSxFQUFLLFlBQVUsQ0FBRztBQUM3QixNQUFFLEVBQUksT0FBSyxDQUFDO0VBQ2Q7QVEvQkosQVIrQkksZ0JRL0JVLFVBQVUsQUFBQyx1Q1JnQ2YsR0FBRSxFUS9Cd0MsQ1IrQnRDO0FBQ1YsTUFBSSxLQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsQ0FBQyxDQUFDO0FPakNZLEFQa0N0QyxDT2xDc0M7QUVBeEMsQUFBSSxFQUFBLFdBQW9DLENBQUE7QUNBeEMsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDLE9Wb0MzQixLQUFJLENBQUosVUFBTSxLQUFJLENBQUc7QUFDWCxPQUFJLENBQUMsSUFBRyxNQUFNLENBQUc7QUFDZixVQUFNLElBQUksTUFBSSxBQUFDLENBQUMsOENBQTZDLENBQUMsQ0FBQztJQUNqRTtBQUFBLEFBQ0EsT0FBSSxNQUFPLE1BQUksQ0FBQSxFQUFLLFNBQU8sQ0FBQSxFQUFLLENBQUEsS0FBSSxFQUFJLEVBQUEsQ0FBQSxFQUFLLENBQUEsS0FBSSxFQUFJLEtBQUcsQ0FBRztBQUN6RCxVQUFNLElBQUksTUFBSSxBQUFDLENBQUMsb0JBQW1CLEVBQUksTUFBSSxDQUFDLENBQUM7SUFDL0M7QUFBQSxBQUNBLFFBQUksTUFBTSxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLENBQUcsTUFBSSxDQUFDLENBQUM7RUFDbEMsTUFqQnVCLFdBQVMsQ1UxQnNCO0FWNkN4RCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgUGVyaXBoZXJhbCB9IGZyb20gJ3Jhc3BpLXBlcmlwaGVyYWwnO1xuaW1wb3J0IGFkZG9uIGZyb20gJy4uL2xpYi9hZGRvbic7XG5cbmV4cG9ydCBjbGFzcyBQV00gZXh0ZW5kcyBQZXJpcGhlcmFsIHtcbiAgY29uc3RydWN0b3IocGluKSB7XG4gICAgaWYgKHR5cGVvZiBwaW4gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBpbiA9ICdQV00wJztcbiAgICB9XG4gICAgc3VwZXIocGluKTtcbiAgICBhZGRvbi5pbml0KHRoaXMucGluc1swXSk7XG4gIH1cblxuICB3cml0ZSh2YWx1ZSkge1xuICAgIGlmICghdGhpcy5hbGl2ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gd3JpdGUgdG8gYSBkZXN0cm95ZWQgcGVyaXBoZXJhbCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInIHx8IHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMjQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBQV00gdmFsdWUgJyArIHZhbHVlKTtcbiAgICB9XG4gICAgYWRkb24ud3JpdGUodGhpcy5waW5zWzBdLCB2YWx1ZSk7XG4gIH1cbn1cbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsICRfX3BsYWNlaG9sZGVyX18wKTsiLCJ7Z2V0OiAkX19wbGFjZWhvbGRlcl9fMH0iLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiLCJ7dmFsdWU6ICRfX3BsYWNlaG9sZGVyX18wfSIsIigkX19wbGFjZWhvbGRlcl9fMCA9IHJlcXVpcmUoJF9fcGxhY2Vob2xkZXJfXzEpLCBcbiAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgJiYgJF9fcGxhY2Vob2xkZXJfXzMuX19lc01vZHVsZSAmJiAkX19wbGFjZWhvbGRlcl9fNCB8fCB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzV9KSIsInZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xIiwiJHRyYWNldXJSdW50aW1lLnN1cGVyQ2FsbCgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=